# 在 iOS App 中触发 GitHub Actions 指南

## 1. 准备工作

### GitHub Token 设置
1. 访问 GitHub -> Settings -> Developer settings -> Personal access tokens
2. 点击 "Generate new token (classic)"
3. 勾选权限：
   - repo (全选)
   - workflow
4. 生成并保存 token

### 环境变量
```swift
let GITHUB_TOKEN = "your_token_here"
let REPO_OWNER = "chiang881"
let REPO_NAME = "instaBOT"
```

## 2. Swift 代码实现

### 基础网络请求类
```swift
class GitHubService {
    static let shared = GitHubService()
    private let baseURL = "https://api.github.com"
    private let token: String
    
    init() {
        self.token = ProcessInfo.processInfo.environment["GITHUB_TOKEN"] ?? ""
    }
    
    // 触发 Actions
    func triggerWorkflow(deviceInfo: [String: Any], completion: @escaping (Bool, Error?) -> Void) {
        let endpoint = "/repos/\(REPO_OWNER)/\(REPO_NAME)/dispatches"
        let url = URL(string: baseURL + endpoint)!
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("InstaBotTrigger/1.0", forHTTPHeaderField: "User-Agent")
        
        let payload: [String: Any] = [
            "event_type": "trigger-bot",
            "client_payload": [
                "device_info": deviceInfo
            ]
        ]
        
        request.httpBody = try? JSONSerialization.data(withJSONObject: payload)
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(false, error)
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                completion(false, nil)
                return
            }
            
            completion(httpResponse.statusCode == 204, nil)
        }
        
        task.resume()
    }
}
```

### 设备信息收集类
```swift
class DeviceInfoCollector {
    static func getDeviceInfo() -> [String: Any] {
        let device = UIDevice.current
        let locale = Locale.current
        let timeZone = TimeZone.current
        
        return [
            "platform": device.systemName + " " + device.systemVersion,
            "language": locale.languageCode ?? "unknown",
            "timezone": timeZone.identifier,
            "timestamp": ISO8601DateFormatter().string(from: Date()),
            "deviceModel": device.model,
            "deviceName": device.name
        ]
    }
}
```

### 使用示例
```swift
class BotController {
    func startBot() {
        // 收集设备信息
        let deviceInfo = DeviceInfoCollector.getDeviceInfo()
        
        // 触发 Actions
        GitHubService.shared.triggerWorkflow(deviceInfo: deviceInfo) { success, error in
            DispatchQueue.main.async {
                if success {
                    print("机器人启动成功")
                } else {
                    print("启动失败: \(error?.localizedDescription ?? "未知错误")")
                }
            }
        }
    }
}
```

## 3. 使用方法

### 在 ViewController 中调用
```swift
class ViewController: UIViewController {
    private let botController = BotController()
    
    @IBAction func startBotButtonTapped(_ sender: UIButton) {
        botController.startBot()
    }
}
```

## 4. 安全建议

1. 不要在代码中硬编码 token，使用环境变量或安全的密钥存储
2. 在生产环境中使用 Keychain 存储敏感信息
3. 实现 token 自动刷新机制
4. 添加请求失败重试机制
5. 实现网络状态检查

## 5. 错误处理

```swift
enum GitHubError: Error {
    case networkError
    case invalidResponse
    case unauthorized
    case rateLimitExceeded
    case serverError
}

extension GitHubService {
    func handleError(_ error: Error) -> GitHubError {
        switch error {
        case URLError.notConnectedToInternet:
            return .networkError
        case URLError.timedOut:
            return .networkError
        default:
            return .serverError
        }
    }
}
```

## 6. 最佳实践

1. 添加网络状态监控
2. 实现重试机制
3. 添加日志记录
4. 实现用户反馈
5. 处理后台运行状态
6. 添加超时处理
7. 实现取消机制

## 7. 示例完整代码

参考 GitHub 仓库：[iOS Bot Trigger Example](https://github.com/your-username/ios-bot-trigger)

## 8. 注意事项

1. 确保 token 有足够的权限
2. 注意 GitHub API 的速率限制
3. 处理网络异常情况
4. 保护用户隐私数据
5. 遵循 GitHub API 使用规范

## 9. 如何停止 Actions

### 获取运行中的工作流
```swift
extension GitHubService {
    func getRunningWorkflows(completion: @escaping ([String: Any]?, Error?) -> Void) {
        let endpoint = "/repos/\(REPO_OWNER)/\(REPO_NAME)/actions/runs?status=in_progress"
        let url = URL(string: baseURL + endpoint)!
        
        var request = URLRequest(url: url)
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(nil, error)
                return
            }
            
            guard let data = data,
                  let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] else {
                completion(nil, GitHubError.invalidResponse)
                return
            }
            
            completion(json, nil)
        }
        
        task.resume()
    }
    
    func cancelWorkflow(runId: Int, completion: @escaping (Bool, Error?) -> Void) {
        let endpoint = "/repos/\(REPO_OWNER)/\(REPO_NAME)/actions/runs/\(runId)/cancel"
        let url = URL(string: baseURL + endpoint)!
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        
        let task = URLSession.shared.dataTask(with: request) { _, response, error in
            if let error = error {
                completion(false, error)
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                completion(false, GitHubError.invalidResponse)
                return
            }
            
            completion(httpResponse.statusCode == 202, nil)
        }
        
        task.resume()
    }
}
```

### 在 BotController 中添加停止功能
```swift
extension BotController {
    func stopBot(completion: @escaping (Bool, String) -> Void) {
        GitHubService.shared.getRunningWorkflows { json, error in
            if let error = error {
                completion(false, "获取工作流状态失败: \(error.localizedDescription)")
                return
            }
            
            guard let json = json,
                  let workflowRuns = json["workflow_runs"] as? [[String: Any]],
                  !workflowRuns.isEmpty else {
                completion(false, "没有正在运行的工作流")
                return
            }
            
            // 获取最新的运行实例
            guard let latestRun = workflowRuns.first,
                  let runId = latestRun["id"] as? Int else {
                completion(false, "无法获取工作流ID")
                return
            }
            
            // 取消工作流
            GitHubService.shared.cancelWorkflow(runId: runId) { success, error in
                if success {
                    completion(true, "机器人已停止")
                } else {
                    completion(false, "停止失败: \(error?.localizedDescription ?? "未知错误")")
                }
            }
        }
    }
}
```

### 在 ViewController 中使用
```swift
class ViewController: UIViewController {
    private let botController = BotController()
    
    @IBAction func startBotButtonTapped(_ sender: UIButton) {
        botController.startBot()
    }
    
    @IBAction func stopBotButtonTapped(_ sender: UIButton) {
        botController.stopBot { success, message in
            DispatchQueue.main.async {
                if success {
                    // 显示成功提示
                    self.showAlert(title: "成功", message: message)
                } else {
                    // 显示错误提示
                    self.showAlert(title: "错误", message: message)
                }
            }
        }
    }
    
    private func showAlert(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "确定", style: .default))
        present(alert, animated: true)
    }
}
```

### 最佳实践

1. 状态检查
```swift
extension BotController {
    func checkBotStatus(completion: @escaping (String) -> Void) {
        GitHubService.shared.getRunningWorkflows { json, error in
            if let error = error {
                completion("检查状态失败: \(error.localizedDescription)")
                return
            }
            
            guard let json = json,
                  let workflowRuns = json["workflow_runs"] as? [[String: Any]] else {
                completion("机器人未运行")
                return
            }
            
            if workflowRuns.isEmpty {
                completion("机器人未运行")
            } else {
                guard let latestRun = workflowRuns.first,
                      let status = latestRun["status"] as? String else {
                    completion("状态未知")
                    return
                }
                completion("机器人状态: \(status)")
            }
        }
    }
}
```

2. 定期检查
```swift
class BotStatusMonitor {
    private var timer: Timer?
    
    func startMonitoring(interval: TimeInterval = 30.0, statusCallback: @escaping (String) -> Void) {
        timer = Timer.scheduledTimer(withTimeInterval: interval, repeats: true) { [weak self] _ in
            BotController().checkBotStatus(completion: statusCallback)
        }
    }
    
    func stopMonitoring() {
        timer?.invalidate()
        timer = nil
    }
}
```

### 注意事项

1. 停止操作需要额外的权限，确保 token 有 `workflow` 权限
2. 建议在停止前先检查工作流状态
3. 实现防抖动机制，避免频繁的停止操作
4. 添加确认对话框，防止误操作
5. 停止后要更新 UI 状态
6. 考虑添加自动重试机制
7. 记录操作日志 